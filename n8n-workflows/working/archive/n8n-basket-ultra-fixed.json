{
  "name": "üèÄ Basket Stats Complete - ULTRA FIXED",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "value": "0 8 * * 1,4"
            }
          ]
        }
      },
      "id": "b8c5e5c4-8e2f-4a5e-9b3d-2c1a0b9d8e7f",
      "name": "‚è∞ Schedule (Mon/Thu 8AM)",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [260, 300]
    },
    {
      "parameters": {
        "url": "https://www.playbasket.it/toscana/league.php?lt=2&lf=M&lr=TO&lp=FI&lc=C%2FM&lg=1&mod=st",
        "options": {
          "responseFormat": "string"
        }
      },
      "id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
      "name": "üåê Get PlayBasket HTML",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [480, 300]
    },
    {
      "parameters": {
        "url": "https://api.github.com/repos/magiaslab/svbtailwindok3/contents/src/data/stats/serie-c-stats.json",
        "options": {
          "headers": {
            "Accept": "application/vnd.github.v3+json",
            "Authorization": "token YOUR_GITHUB_TOKEN_HERE"
          },
          "qs": {
            "ref": "master"
          }
        }
      },
      "id": "f1e2d3c4-b5a6-9780-1234-567890abcdef",
      "name": "üì• Get JSON SHA",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [480, 180]
    },
    {
      "parameters": {
        "url": "https://api.github.com/repos/magiaslab/svbtailwindok3/contents/src/data/stats-data.ts",
        "options": {
          "headers": {
            "Accept": "application/vnd.github.v3+json",
            "Authorization": "token YOUR_GITHUB_TOKEN_HERE"
          },
          "qs": {
            "ref": "master"
          }
        }
      },
      "id": "g2h3i4j5-k6l7-8901-2345-6789abcdef01",
      "name": "üì• Get TS SHA",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [480, 420]
    },
    {
      "parameters": {
        "jsCode": "// Funzione per estrarre testo da HTML\nfunction extractTextFromHtml(html) {\n  if (!html || typeof html !== 'string') return '';\n  return html.replace(/<[^>]*>/g, '').replace(/\\s+/g, ' ').trim();\n}\n\n// Funzione per estrarre href\nfunction extractHref(html) {\n  if (!html || typeof html !== 'string') return '';\n  const match = html.match(/href=[\"']([^\"']*)[\"']/);\n  return match ? match[1] : '';\n}\n\n// Accesso ROBUSTO ai dati - gestisce tutti i possibili formati\nlet htmlData = '';\nlet jsonSha = '';\nlet tsSha = '';\n\nconsole.log('üîç Debug - Input analysis:');\nconsole.log('- Items:', items ? items.length : 'undefined');\n\nif (items && items.length > 0) {\n  for (let i = 0; i < items.length; i++) {\n    const item = items[i];\n    console.log(`- Item[${i}] keys:`, Object.keys(item || {}));\n    \n    if (item) {\n      // Cerca HTML data in tutte le possibili propriet√†\n      if (!htmlData) {\n        const htmlProps = ['data', 'json', 'body', 'response'];\n        for (const prop of htmlProps) {\n          if (item[prop] && typeof item[prop] === 'string' && item[prop].length > 1000) {\n            htmlData = item[prop];\n            console.log(`‚úÖ HTML trovato in item[${i}].${prop}`);\n            break;\n          }\n        }\n      }\n      \n      // Cerca SHA per JSON\n      if (item.json && item.json.sha && item.json.path) {\n        if (item.json.path.includes('serie-c-stats.json')) {\n          jsonSha = item.json.sha;\n          console.log(`‚úÖ JSON SHA trovato: ${jsonSha}`);\n        } else if (item.json.path.includes('stats-data.ts')) {\n          tsSha = item.json.sha;\n          console.log(`‚úÖ TS SHA trovato: ${tsSha}`);\n        }\n      }\n    }\n  }\n}\n\nconsole.log('üìä Risultati accesso dati:');\nconsole.log('- HTML length:', htmlData ? htmlData.length : 0);\nconsole.log('- JSON SHA:', jsonSha ? 'found' : 'missing');\nconsole.log('- TS SHA:', tsSha ? 'found' : 'missing');\n\n// Verifica che abbiamo almeno l'HTML\nif (!htmlData || htmlData.length < 1000) {\n  console.log('‚ùå HTML non trovato o troppo corto');\n  return [{\n    json: {\n      error: 'HTML not found or invalid',\n      debug: {\n        itemsLength: items ? items.length : 0,\n        htmlLength: htmlData ? htmlData.length : 0,\n        hasJsonSha: !!jsonSha,\n        hasTsSha: !!tsSha,\n        htmlPreview: htmlData ? htmlData.substring(0, 300) : 'no data'\n      }\n    }\n  }];\n}\n\n// Parsing della tabella con regex migliorato\nconst tableRegex = /<table[^>]*class=[\"']league_standings_ranking stats[\"'][^>]*>([\\s\\S]*?)<\\/table>/g;\nconst tableMatch = tableRegex.exec(htmlData);\n\nif (!tableMatch) {\n  console.log('‚ùå Tabella non trovata');\n  // Debug: cerca pattern alternativi\n  const debugPatterns = [\n    /league_standings_ranking/g,\n    /<table[^>]*>/g,\n    /stats/g\n  ];\n  \n  debugPatterns.forEach((pattern, index) => {\n    const matches = htmlData.match(pattern);\n    console.log(`- Pattern ${index + 1}:`, matches ? matches.length : 0);\n  });\n  \n  return [{\n    json: {\n      error: 'Table not found',\n      debug: {\n        htmlLength: htmlData.length,\n        htmlPreview: htmlData.substring(0, 500),\n        tablePatterns: debugPatterns.map(p => ({ pattern: p.source, matches: (htmlData.match(p) || []).length }))\n      }\n    }\n  }];\n}\n\nconsole.log('‚úÖ Tabella trovata, inizio parsing...');\n\nconst tableContent = tableMatch[1];\nconst rowRegex = /<tr[^>]*>([\\s\\S]*?)<\\/tr>/g;\nconst standings = [];\nlet match;\nlet rowIndex = 0;\n\nwhile ((match = rowRegex.exec(tableContent)) !== null) {\n  const rowContent = match[1];\n  \n  // Salta header\n  if (rowContent.includes('<th') || rowIndex === 0) {\n    rowIndex++;\n    continue;\n  }\n  \n  const cellRegex = /<td[^>]*>([\\s\\S]*?)<\\/td>/g;\n  const cells = [];\n  let cellMatch;\n  \n  while ((cellMatch = cellRegex.exec(rowContent)) !== null) {\n    cells.push(cellMatch[1]);\n  }\n  \n  if (cells.length >= 8) {\n    // Estrazione dati specifici\n    const teamCell = cells[1] || '';\n    const teamName = extractTextFromHtml(teamCell);\n    const teamLink = extractHref(teamCell);\n    const teamIdMatch = teamLink.match(/obj=(\\d+)/);\n    const teamId = teamIdMatch ? teamIdMatch[1] : '';\n    \n    // Punti dalla cella con highlighted_data\n    let points = 0;\n    const pointsCell = cells[2] || '';\n    const pointsMatch = pointsCell.match(/<span[^>]*class=[\"'][^\"']*highlighted_data[^\"']*[\"'][^>]*>([^<]+)<\\/span>/);\n    if (pointsMatch) {\n      points = parseInt(pointsMatch[1]) || 0;\n    }\n    \n    const games = parseInt(extractTextFromHtml(cells[3] || '0')) || 0;\n    const wins = parseInt(extractTextFromHtml(cells[4] || '0')) || 0;\n    const losses = parseInt(extractTextFromHtml(cells[5] || '0')) || 0;\n    \n    // Percentuale\n    let percentage = 0;\n    const percentageText = extractTextFromHtml(cells[6] || '0');\n    if (percentageText.includes('%')) {\n      percentage = parseFloat(percentageText.replace('%', '')) / 100;\n    } else {\n      percentage = games > 0 ? wins / games : 0;\n    }\n    \n    const pointsFor = parseInt(extractTextFromHtml(cells[7] || '0')) || 0;\n    const pointsAgainst = parseInt(extractTextFromHtml(cells[8] || '0')) || 0;\n    \n    standings.push({\n      position: standings.length + 1,\n      team: teamName,\n      teamId: teamId,\n      teamLink: teamLink.startsWith('http') ? teamLink : `https://www.playbasket.it${teamLink}`,\n      points: points,\n      pointsPerGame: points,\n      games: games,\n      wins: wins,\n      losses: losses,\n      percentage: percentage,\n      streak: wins > losses ? `${wins}W` : `${losses}L`,\n      pointsFor: pointsFor,\n      pointsAgainst: pointsAgainst,\n      quality: games > 0 ? ((pointsFor - pointsAgainst) / games * 10 + 50).toFixed(2) : '50.00',\n      pointsForPerGame: games > 0 ? Math.round(pointsFor / games) : 0,\n      pointsAgainstPerGame: games > 0 ? Math.round(pointsAgainst / games) : 0\n    });\n  }\n  \n  rowIndex++;\n}\n\nconsole.log(`‚úÖ Parsing completato: ${standings.length} squadre trovate`);\n\n// Creazione oggetto finale\nconst now = new Date().toISOString();\nconst statsData = {\n  standings: standings,\n  teamStats: {},\n  lastUpdate: now,\n  season: '2025-2026',\n  competition: 'Serie C Maschile Toscana',\n  conference: 'Conference Nord-Ovest',\n  group: 'Girone B',\n  totalTeams: standings.length,\n  source: 'playbasket.it',\n  status: 'active'\n};\n\n// Creazione contenuto TypeScript\nconst tsContent = `// Dati delle statistiche Serie C\\n// Questo file viene importato direttamente dai componenti\\n// Aggiornato automaticamente: ${now}\\n\\nexport const serieCStatsData = ${JSON.stringify(statsData, null, 2)};`;\n\nreturn [{\n  json: {\n    success: true,\n    data: statsData,\n    tsContent: tsContent,\n    jsonSha: jsonSha,\n    tsSha: tsSha,\n    totalTeams: standings.length,\n    lastUpdate: now,\n    debug: {\n      htmlLength: htmlData.length,\n      tableFound: true,\n      rowsParsed: standings.length\n    }\n  }\n}];"
      },
      "id": "h3i4j5k6-l7m8-9012-3456-789abcdef012",
      "name": "‚öôÔ∏è Parse & Prepare All - FIXED",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [700, 300]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.success}}",
              "value2": true
            }
          ]
        }
      },
      "id": "i4j5k6l7-m8n9-0123-4567-89abcdef0123",
      "name": "‚úÖ Check Quality",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [920, 300]
    },
    {
      "parameters": {
        "url": "https://api.github.com/repos/magiaslab/svbtailwindok3/contents/src/data/stats/serie-c-stats.json",
        "requestMethod": "PUT",
        "jsonParameters": true,
        "options": {
          "headers": {
            "Authorization": "token YOUR_GITHUB_TOKEN_HERE",
            "Content-Type": "application/json"
          }
        },
        "bodyParametersJson": "={\n  \"message\": \"ü§ñ Aggiornamento automatico statistiche Serie C - {{ $now.format('DD/MM/YYYY HH:mm') }}\",\n  \"content\": \"{{ $base64(JSON.stringify($json.data, null, 2)) }}\",\n  \"sha\": \"{{ $json.jsonSha }}\"\n}"
      },
      "id": "j5k6l7m8-n9o0-1234-5678-9abcdef01234",
      "name": "üì§ Update JSON File",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [1140, 200]
    },
    {
      "parameters": {
        "url": "https://api.github.com/repos/magiaslab/svbtailwindok3/contents/src/data/stats-data.ts",
        "requestMethod": "PUT",
        "jsonParameters": true,
        "options": {
          "headers": {
            "Authorization": "token YOUR_GITHUB_TOKEN_HERE",
            "Content-Type": "application/json"
          }
        },
        "bodyParametersJson": "={\n  \"message\": \"ü§ñ Aggiornamento automatico stats-data.ts - {{ $now.format('DD/MM/YYYY HH:mm') }}\",\n  \"content\": \"{{ $base64($json.tsContent) }}\",\n  \"sha\": \"{{ $json.tsSha }}\"\n}"
      },
      "id": "k6l7m8n9-o0p1-2345-6789-abcdef012345",
      "name": "üì§ Update TS File",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [1140, 400]
    },
    {
      "parameters": {
        "url": "https://api.netlify.com/build_hooks/66f7e9c6e0b7a7b8c9d0e1f2",
        "requestMethod": "POST",
        "options": {}
      },
      "id": "l7m8n9o0-p1q2-3456-789a-bcdef0123456",
      "name": "üöÄ Trigger Netlify Deploy",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [1360, 300]
    },
    {
      "parameters": {
        "jsCode": "// Analisi risultati finali con gestione robusta\nlet jsonResult = 'unknown';\nlet tsResult = 'unknown';\nlet deployResult = 'unknown';\n\nconsole.log('üéØ Analisi risultati finali...');\nconsole.log('- Items ricevuti:', items ? items.length : 0);\n\nif (items && items.length > 0) {\n  for (let i = 0; i < items.length; i++) {\n    const item = items[i];\n    console.log(`- Item[${i}]:`, Object.keys(item || {}));\n    \n    if (item && typeof item === 'object') {\n      // Controlla response da GitHub API (JSON)\n      if (item.content && item.sha && item.path) {\n        if (item.path.includes('serie-c-stats.json')) {\n          jsonResult = '‚úÖ JSON aggiornato';\n          console.log('‚úÖ Aggiornamento JSON confermato');\n        } else if (item.path.includes('stats-data.ts')) {\n          tsResult = '‚úÖ TS aggiornato';\n          console.log('‚úÖ Aggiornamento TS confermato');\n        }\n      }\n      // Controlla response da Netlify\n      else if (item.id || (item.message && item.message.includes('deploy'))) {\n        deployResult = '‚úÖ Deploy triggerato';\n        console.log('‚úÖ Deploy Netlify confermato');\n      }\n      // Controlla se √® un oggetto con propriet√† json\n      else if (item.json) {\n        if (item.json.content && item.json.sha && item.json.path) {\n          if (item.json.path.includes('serie-c-stats.json')) {\n            jsonResult = '‚úÖ JSON aggiornato';\n          } else if (item.json.path.includes('stats-data.ts')) {\n            tsResult = '‚úÖ TS aggiornato';\n          }\n        } else if (item.json.id || (item.json.message && item.json.message.includes('deploy'))) {\n          deployResult = '‚úÖ Deploy triggerato';\n        }\n      }\n    }\n  }\n}\n\nconst summary = {\n  timestamp: new Date().toISOString(),\n  results: {\n    json: jsonResult,\n    typescript: tsResult,\n    deploy: deployResult\n  },\n  success: jsonResult.includes('‚úÖ') && tsResult.includes('‚úÖ') && deployResult.includes('‚úÖ'),\n  itemsProcessed: items ? items.length : 0\n};\n\nconsole.log('üìä Risultati finali:', summary);\n\nreturn [{ json: summary }];"
      },
      "id": "m8n9o0p1-q2r3-4567-89ab-cdef01234567",
      "name": "üéâ Final Results - FIXED",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [1580, 300]
    },
    {
      "parameters": {
        "jsCode": "// Workflow fallito - gestione errori migliorata\nconst errorInfo = {\n  error: 'Scraping failed',\n  message: 'Dati non validi o scraping fallito',\n  timestamp: new Date().toISOString(),\n  action: 'Mantenuti dati esistenti',\n  debug: {\n    inputItems: items ? items.length : 0,\n    inputData: items && items.length > 0 ? Object.keys(items[0] || {}) : []\n  }\n};\n\nconsole.log('‚ùå Workflow fallito:', errorInfo);\n\nreturn [{ json: errorInfo }];"
      },
      "id": "n9o0p1q2-r3s4-5678-9abc-def012345678",
      "name": "‚ùå Handle Failure - FIXED",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [1140, 500]
    }
  ],
  "connections": {
    "‚è∞ Schedule (Mon/Thu 8AM)": {
      "main": [
        [
          {
            "node": "üåê Get PlayBasket HTML",
            "type": "main",
            "index": 0
          },
          {
            "node": "üì• Get JSON SHA",
            "type": "main",
            "index": 0
          },
          {
            "node": "üì• Get TS SHA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üåê Get PlayBasket HTML": {
      "main": [
        [
          {
            "node": "‚öôÔ∏è Parse & Prepare All - FIXED",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üì• Get JSON SHA": {
      "main": [
        [
          {
            "node": "‚öôÔ∏è Parse & Prepare All - FIXED",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üì• Get TS SHA": {
      "main": [
        [
          {
            "node": "‚öôÔ∏è Parse & Prepare All - FIXED",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚öôÔ∏è Parse & Prepare All - FIXED": {
      "main": [
        [
          {
            "node": "‚úÖ Check Quality",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚úÖ Check Quality": {
      "main": [
        [
          {
            "node": "üì§ Update JSON File",
            "type": "main",
            "index": 0
          },
          {
            "node": "üì§ Update TS File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "‚ùå Handle Failure - FIXED",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üì§ Update JSON File": {
      "main": [
        [
          {
            "node": "üöÄ Trigger Netlify Deploy",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üì§ Update TS File": {
      "main": [
        [
          {
            "node": "üöÄ Trigger Netlify Deploy",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üöÄ Trigger Netlify Deploy": {
      "main": [
        [
          {
            "node": "üéâ Final Results - FIXED",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "timezone": "Europe/Rome"
  },
  "versionId": "12345678-90ab-cdef-1234-567890abcdef",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "id": "87654321-abcd-ef12-3456-7890abcdef12",
  "tags": []
}
