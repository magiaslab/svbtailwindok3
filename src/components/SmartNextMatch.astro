---
import CountdownTimer from "./CountdownTimer.astro";
import LucideIcon from "./LucideIcon.astro";
import TeamLogo from "./TeamLogo.astro";
import { format } from "date-fns";
import { it } from "date-fns/locale";

// Importa i dati del calendario
import calendarData from "../data/calendar-system.json";

// Funzione per ottenere le prossime partite
function getUpcomingMatches() {
  const now = new Date();
  const svbTeamId = "svb";
  
  console.log('🔍 DEBUG getUpcomingMatches:');
  console.log('Data corrente (now):', now.toISOString());
  
  const filteredMatches = calendarData.matches.filter(match => {
    const matchDate = new Date(match.date);
    const isFuture = matchDate > now;
    const involvesSvb = match.homeTeam === svbTeamId || match.awayTeam === svbTeamId;
    
    console.log(`Partita ${match.id}:`, {
      date: match.date,
      matchDate: matchDate.toISOString(),
      isFuture,
      involvesSvb,
      home: match.homeTeam,
      away: match.awayTeam
    });
    
    return isFuture && involvesSvb;
  });
  
  console.log('Partite filtrate:', filteredMatches.length);
  
  return filteredMatches
    .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())
    .slice(0, calendarData.settings.maxUpcomingMatches);
}

// Funzione per determinare se è casa o trasferta
function isHomeMatch(match: any, teamId: string) {
  return match.homeTeam === teamId;
}

// Funzione per ottenere i dati della squadra
function getTeamData(teamId: string) {
  return calendarData.teams[teamId as keyof typeof calendarData.teams];
}

// Funzione per ottenere i dati della competizione
function getCompetitionData(competitionId: string) {
  return calendarData.competitions[competitionId as keyof typeof calendarData.competitions];
}

const upcomingMatches = getUpcomingMatches();
const svbTeamId = "svb";

// Debug temporaneo per troubleshooting
console.log('🔍 DEBUG SmartNextMatch:');
console.log('Data corrente:', new Date().toISOString());
console.log('Tutte le partite:', calendarData.matches.length);
console.log('Partite con SVB:', calendarData.matches.filter(m => m.homeTeam === 'svb' || m.awayTeam === 'svb').length);
console.log('Partite future:', calendarData.matches.filter(m => new Date(m.date) > new Date()).length);
console.log('Prossime partite trovate:', upcomingMatches.length);
if (upcomingMatches.length > 0) {
  console.log('Prima partita:', {
    id: upcomingMatches[0].id,
    date: upcomingMatches[0].date,
    home: upcomingMatches[0].homeTeam,
    away: upcomingMatches[0].awayTeam,
    competition: upcomingMatches[0].competition
  });
}
---

<div class="flex flex-col w-full mb-10 border-gray-200 rounded-lg bg-gray-50 dark:bg-gray-800 dark:border-gray-700 p-2 mt-32">
  <h1 class="dark:text-white text-red-700 font-black m-2 text-center text-4xl mb-5">Prossime Partite</h1>
  
  <div class="flex justify-center border-gray-200 bg-gray-50 dark:bg-gray-800 dark:border-gray-700 rounded-lg">
    <div class="items-center grid md:grid-cols-3 w-full grid-cols-1">
      {upcomingMatches.length > 0 ? (
        upcomingMatches.map((match) => {
          const isHome = isHomeMatch(match, svbTeamId);
          const homeTeam = getTeamData(match.homeTeam);
          const awayTeam = getTeamData(match.awayTeam);
          const competition = getCompetitionData(match.competition);
          const matchDate = new Date(match.date);
          
          return (
            <div class="text-center rounded border-gray-200 bg-gray-200 dark:bg-gray-600 dark:border-gray-700 m-1 p-4">
              <div class="grid grid-cols-3 grid-rows-1 gap-4">
                {/* Squadra Home */}
                <div class="flex flex-col justify-center items-center">
                  <TeamLogo 
                    teamId={match.homeTeam}
                    teamName={homeTeam.name}
                    logoPath={homeTeam.logo}
                    class="mb-2"
                  />
                  <p class="text-xs text-black dark:text-white font-medium">{homeTeam.shortName}</p>
                </div>
                
                {/* Centro con informazioni partita */}
                <div class="flex justify-center items-center flex-col">
                  {/* Competizione */}
                  <div class={`text-center flex items-center justify-center gap-2 px-3 py-2 rounded-full ${competition.badgeColor} ${competition.textColor} text-sm font-bold mb-2 shadow-lg`}>
                    <LucideIcon name={competition.icon} size={16} />
                    <span>{competition.shortName}</span>
                  </div>
                  
                  {/* Icona Home/Away */}
                  <div class="mb-2">
                    {isHome ? (
                      <div class="text-green-600 dark:text-green-400 flex flex-col items-center">
                        <LucideIcon name="home" size={24} class="mb-1" />
                        <span class="text-xs font-medium">Casa</span>
                      </div>
                    ) : (
                      <div class="text-blue-600 dark:text-blue-400 flex flex-col items-center">
                        <LucideIcon name="mapPin" size={24} class="mb-1" />
                        <span class="text-xs font-medium">Trasferta</span>
                      </div>
                    )}
                  </div>
                  
                  {/* Countdown Timer */}
                  <CountdownTimer targetDate={match.date} matchId={match.id} />
                  
                  {/* Luogo e data */}
                  <div class="flex items-center gap-1 text-gray-500 dark:text-gray-300 text-xs mt-2">
                    <LucideIcon name="building" size={12} />
                    <span>{match.venue}</span>
                  </div>
                  <div class="flex items-center gap-1 text-gray-500 dark:text-gray-300 text-xs">
                    <LucideIcon name="calendar" size={12} />
                    <span>{format(matchDate, "dd MMMM yyyy 'ore' HH:mm", { locale: it })}</span>
                  </div>
                </div>
                
                {/* Squadra Away */}
                <div class="flex flex-col justify-center items-center">
                  <TeamLogo 
                    teamId={match.awayTeam}
                    teamName={awayTeam.name}
                    logoPath={awayTeam.logo}
                    class="mb-2"
                  />
                  <p class="text-xs text-black dark:text-white font-medium">{awayTeam.shortName}</p>
                </div>
              </div>
            </div>
          );
        })
      ) : (
        // Nessuna partita programmata
        <div class="col-span-3 text-center py-8">
          <div class="text-gray-500 dark:text-gray-400">
            <svg class="w-16 h-16 mx-auto mb-4" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"/>
            </svg>
            <p class="text-lg font-medium">Nessuna partita programmata</p>
            <p class="text-sm">I calendari sono in fase di pubblicazione</p>
          </div>
        </div>
      )}
    </div>
  </div>
  
  <div class="w-full">
    <a href="/Calendari">
      <button type="button" class="mt-5 text-white bg-red-700 hover:bg-red-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center inline-flex items-center gap-2 dark:bg-red-600 dark:hover:bg-red-700 dark:focus:ring-red-800">
        <LucideIcon name="calendar" size={20} />
        <span>Vedi tutti i calendari</span>
        <LucideIcon name="arrowRight" size={16} />
      </button>
    </a>
  </div>
</div> 